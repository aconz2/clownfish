#!/usr/bin/env python3

"""Count occurrences of each kmer in each gene against a sample"""

import os
import sys
import logging
import argparse
import resource
import functools
import subprocess
import numpy
from Bio import SeqIO

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(message)s')

def memory_usage():
    """Returns in kilobytes, the total (or maybe peak) memory usage"""
    return resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1024

def trim_and_clamp(arr,
                   left_trim=None,
                   right_trim=None,
                   minimum=None,
                   maximum=None):
    """arr should be a numpy array,
    the first `left_trim` values in the array will be dropped
    the last `right_trim` values in the array will be dropped
    values in the array < `minimum` will be set to 0
    values in the array > `maximum` will be set to 0
    (uses kwargs for easy partial application, all parameters
    may be given as None)"""

    if left_trim is not None:
        arr = arr[left_trim:]

    if right_trim is not None:
        arr = arr[0:-right_trim]

    if minimum is not None:
        mins = numpy.ones(arr.size) * minimum
        arr = numpy.multiply(arr, arr >= mins, arr)

    if maximum is not None:
        maxs = numpy.ones(arr.size) * maximum
        arr = numpy.multiply(arr, arr <= maxs, arr)

    return arr

def count_main():
    """Count kmers in `reads` file, then list the corresponding count for 
    each gene in `genes`"""
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--genes', required=True, type=str,
                        help='FASTA file with genes')
    parser.add_argument('--samples', required=True,
                        type=str, help='FASTA or FASTQ samples')
    parser.add_argument('--canonical', action='store_true', default=False,
                        help='Consider every kmer as its canonical form')
    parser.add_argument('--threads', type=int, default=1,
                        help='Number of threads to run jellyfish counter with')
    parser.add_argument('--size', type=str, required=True,
                        help='Initial size of jellyfish hash table') 
    parser.add_argument('--kmer-length', type=int, required=True, 
                        help='Length of kmer to use')
    args = parser.parse_args(sys.argv[2:])
    logging.debug(args)
    # lower case it!
    args.canonical = 'true' if args.canonical else 'false'
    # <k_mer_len> <canonical> <hash_size> <nb_threads> <reads_file> <genes_file>
    child_args = [os.path.join(os.path.dirname(__file__), 'count'),
                 args.kmer_length, args.canonical,  args.size, args.threads,
                 args.samples, args.genes]
    child_args = list(map(str, child_args))

    logging.debug("Launching child process `count`")
    logging.debug(child_args)
    subprocess.check_call(child_args,
                          stdout=sys.stdout, stderr=sys.stderr,
                          close_fds=False)

def score_main():
    """Scores a list of counts, one per line from STDIN and 
    writes to STDOUT"""
    score_methods = {'mean': numpy.mean,
                     'median': numpy.median}

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--left-trim', type=int, default=None,
                        help='Drop the first <left> numbers')
    parser.add_argument('--right-trim', type=int, default=None,
                        help='Drop the last <right> numbers')
    parser.add_argument('--min', type=int, default=None,
                        help='Consider values < <min> to be 0')
    parser.add_argument('--max', type=int, default=None,
                        help='Consider values > <max> to be 0')
    parser.add_argument('--method', choices=list(score_methods.keys()),
                       required=True, type=str, help='Scoring method to use')
    args = parser.parse_args(sys.argv[2:])
    logging.debug(args)

    trim_and_clamper = functools.partial(trim_and_clamp,
                                         left_trim=args.left_trim,
                                         right_trim=args.right_trim,
                                         minimum=args.min,
                                         maximum=args.max)

    scoring_method = score_methods[args.method]

    int_lists = (list(map(int, line.split())) for line in sys.stdin)
    arrs = (numpy.array(int_list) for int_list in int_lists)
    scores = (scoring_method(trim_and_clamp(arr)) for arr in arrs)
    scores_strs = (str(score) + '\n' for score in scores)

    sys.stdout.writelines(scores_strs)

def main():
    """Estimate relative gene abundance using kmers"""
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('command', choices=['count', 'score'])
    args = parser.parse_args(sys.argv[1:2])
    if args.command == 'count':
        count_main()
    elif args.command == 'score':
        score_main()
    else:
        print("Invalid choice")
        sys.exit(1)
    
if __name__ == "__main__":
    main()
